'use strict';

const util = require('util');
const braces = require('braces');
const picomatch = require('picomatch');
const utils = require('picomatch/lib/utils');
const isEmptyString = val => val === '' || val === './';

/**
 * Returns an array of strings that match one or more glob patterns.
 *
 * ```js
 * const mm = require('micromatch');
 * // mm(list, patterns[, options]);
 *
 * console.log(mm(['a.js', 'a.txt'], ['*.js']));
 * //=> [ 'a.js' ]
 * ```
 * @param {String|Array<string>} `list` List of strings to match.
 * @param {String|Array<string>} `patterns` One or more glob patterns to use for matching.
 * @param {Object} `options` See available [options](#options)
 * @return {Array} Returns an array of matches
 * @summary false
 * @api public
 */

const micromatch = (list, patterns, options) => {
  patterns = [].concat(patterns);
  list = [].concat(list);

  let omit = new Set();
  let keep = new Set();
  let items = new Set();
  let negatives = 0;

  let onResult = state => {
    items.add(state.output);
    if (options && options.onResult) {
      options.onResult(state);
    }
  };

  for (let i = 0; i < patterns.length; i++) {
    let isMatch = picomatch(String(patterns[i]), { ...options, onResult }, true);
    let negated = isMatch.state.negated || isMatch.state.negatedExtglob;
    if (negated) negatives++;

    for (let item of list) {
      let matched = isMatch(item, true);

      let match = negated ? !matched.isMatch : matched.isMatch;
      if (!match) continue;

      if (negated) {
        omit.add(matched.output);
      } else {
        omit.delete(matched.output);
        keep.add(matched.output);
      }
    }
  }

  let result = negatives === patterns.length ? [...items] : [...keep];
  let matches = result.filter(item => !omit.has(item));

  if (options && matches.length === 0) {
    if (options.failglob === true) {
      throw new Error(`No matches found for "${patterns.join(', ')}"`);
    }

    if (options.nonull === true || options.nullglob === true) {
      return options.unescape ? patterns.map(p => p.replace(/\\/g, '')) : patterns;
    }
  }

  return matches;
};

/**
 * Backwards compatibility
 */

micromatch.match = micromatch;

/**
 * Returns a matcher function from the given glob `pattern` and `options`.
 * The returned function takes a string to match as its only argument and returns
 * true if the string is a match.
 *
 * ```js
 * const mm = require('micromatch');
 * // mm.matcher(pattern[, options]);
 *
 * const isMatch = mm.matcher('*.!(*a)');
 * console.log(isMatch('a.a')); //=> false
 * console.log(isMatch('a.b')); //=> true
 * ```
 * @param {String} `pattern` Glob pattern
 * @param {Object} `options`
 * @return {Function} Returns a matcher function.
 * @api public
 */

micromatch.matcher = (pattern, options) => picomatch(pattern, options);

/**
 * Returns true if **any** of the given glob `patterns` match the specified `string`.
 *
 * ```js
 * const mm = require('micromatch');
 * // mm.isMatch(string, patterns[, options]);
 *
 * console.log(mm.isMatch('a.a', ['b.*', '*.a'])); //=> true
 * console.log(mm.isMatch('a.a', 'b.*')); //=> false
 * ```
 * @param {String} `str` The string to test.
 * @param {String|Array} `patterns` One or more glob patterns to use for matching.
 * @param {Object} `[options]` See available [options](#options).
 * @return {Boolean} Returns true if any patterns match `str`
 * @api public
 */

micromatch.isMatch = (str, patterns, options) => picomatch(patterns, options)(str);

/**
 * Backwards compatibility
 */

micromatch.any = micromatch.isMatch;

/**
 * Returns a list of strings that _**do not match any**_ of the given `patterns`.
 *
 * ```js
 * const mm = require('micromatch');
 * // mm.not(list, patterns[, options]);
 *
 * console.log(mm.not(['a.a', 'b.b', 'c.c'], '*.a'));
 * //=> ['b.b', 'c.c']
 * ```
 * @param {Array} `list` Array of strings to match.
 * @param {String|Array} `patterns` One or more glob pattern to use for matching.
 * @param {Object} `options` See available [options](#options) for changing how matches are performed
 * @return {Array} Returns an array of strings that **do not match** the given patterns.
 * @api public
 */

micromatch.not = (list, patterns, options = {}) => {
  patterns = [].concat(patterns).map(String);
  let result = new Set();
  let items = [];

  let onResult = state => {
    if (options.onResult) options.onResult(state);
    items.push(state.output);
  };

  let matches = new Set(micromatch(list, patterns, { ...options, onResult }));

  for (let item of items) {
    if (!matches.has(item)) {
      result.add(item);
    }
  }
  return [...result];
};

/**
 * Returns true if the given `string` contains the given pattern. Similar
 * to [.isMatch](#isMatch) but the pattern can match any part of the string.
 *
 * ```js
 * var mm = require('micromatch');
 * // mm.contains(string, pattern[, options]);
 *
 * console.log(mm.contains('aa/bb/cc', '*b'));
 * //=> true
 * console.log(mm.contains('aa/bb/cc', '*d'));
 * //=> false
 * ```
 * @param {String} `str` The string to match.
 * @param {String|Array} `patterns` Glob pattern to use for matching.
 * @param {Object} `options` See available [options](#options) for changing how matches are performed
 * @return {Boolean} Returns true if any of the patterns matches any part of `str`.
 * @api public
 */

micromatch.contains = (str, pattern, options) => {
  if (typeof str !== 'string') {
    throw new TypeError(`Expected a string: "${util.inspect(str)}"`);
  }

  if (Array.isArray(pattern)) {
    return pattern.some(p => micromatch.contains(str, p, options));
  }

  if (typeof pattern === 'string') {
    if (isEmptyString(str) || isEmptyString(pattern)) {
      return false;
    }

    if (str.includes(pattern) || (str.startsWith('./') && str.slice(2).includes(pattern))) {
      return true;
    }
  }

  return micromatch.isMatch(str, pattern, { ...options, contains: true });
};

/**
 * Filter the keys of the given object with the given `glob` pattern
 * and `options`. Does not attempt to match nested keys. If you need this feature,
 * use [glob-object][] instead.
 *
 * ```js
 * const mm = require('micromatch');
 * // mm.matchKeys(object, patterns[, options]);
 *
 * const obj = { aa: 'a', ab: 'b', ac: 'c' };
 * console.log(mm.matchKeys(obj, '*b'));
 * //=> { ab: 'b' }
 * ```
 * @param {Object} `object` The object with keys to filter.
 * @param {String|Array} `patterns` One or more glob patterns to use for matching.
 * @param {Object} `options` See available [options](#options) for changing how matches are performed
 * @return {Object} Returns an object with only keys that match the given patterns.
 * @api public
 */

micromatch.matchKeys = (obj, patterns, options) => {
  if (!utils.isObject(obj)) {
    throw new TypeError('Expected the first argument to be an object');
  }
  let keys = micromatch(Object.keys(obj), patterns, options);
  let res = {};
  for (let key of keys) res[key] = obj[key];
  return res;
};

/**
 * Returns true if some of the strings in the given `list` match any of the given glob `patterns`.
 *
 * ```js
 * const mm = require('micromatch');
 * // mm.some(list, patterns[, options]);
 *
 * console.log(mm.some(['foo.js', 'bar.js'], ['*.js', '!foo.js']));
 * // true
 * console.log(mm.some(['foo.js'], ['*.js', '!foo.js']));
 * // false
 * ```
 * @param {String|Array} `list` The string or array of strings to test. Returns as soon as the first match is found.
 * @param {String|Array} `patterns` One or more glob patterns to use for matching.
 * @param {Object} `options` See available [options](#options) for changing how matches are performed
 * @return {Boolean} Returns true if any `patterns` matches any of the strings in `list`
 * @api public
 */

micromatch.some = (list, patterns, options) => {
  let items = [].concat(list);

  for (let pattern of [].concat(patterns)) {
    let isMatch = picomatch(String(pattern), options);
    if (items.some(item => isMatch(item))) {
      return true;
    }
  }
  return false;
};

/**
 * Returns true if every string in the given `list` matches
 * any of the given glob `patterns`.
 *
 * ```js
 * const mm = require('micromatch');
 * // mm.every(list, tënd Android, hyr në Microsoft Edge në të dyja pajisjet.Sigurohu që ke hyrë në Microsoft Edge në $1 dhe më pas provo ta dërgosh sërish.Mbyll të gjitha dritaret e Microsoft Edge dhe provo sërish.A je i sigurt që dëshiron të çinstalosh Microsoft Edge?Të çinstalohet Microsoft Edge?Kur të çinstalosh Microsoft Edge, aplikacionet dhe miniaplikacionet që varen nga Edge, nuk do të jenë më në dispozicion. $1Lejo ekzekutimin e "Microsoft Edge" në sfondMicrosoft Edge nuk mund të lexojë dhe të shkruajë në direktorinë e tij të dhënave:

        $1Profili yt nuk mund të përdoret. Përzgjidh një dosje tjetër profili ose përdor një version më të ri të Microsoft Edge.S'mund të t'i lexojmë preferencat e as t'u ruajmë ndryshimet. Mund të mos jesh në gjendje të përdorësh të gjitha tiparet.Skedarin e preferencave nuk e ke të vlefshëm ose është dëmtuar. S'mundëm të t'i rikuperojmë parametrat.Menaxheri i fjalëkalimitPër siguri, Microsoft Edge kërkon që të hysh me fjalëkalimin e pajisjes."Microsoft Edge" po përpiqet të shfaqë detajet e kartës së pagesës. Vendos fjalëkalimin e "Windows" për ta lejuar.Microsoft Edge po përpiqet të shfaqë fjalëkalimet. Për ta lejuar këtë, fut fjalëkalimin tënd të Windows."Microsoft Edge" po përpiqet të kopjojë fjalëkalime. Vendos fjalëkalimin e "Windows" për ta lejuar."Microsoft Edge" po përpiqet të modifikojë fjalëkalime. Vendos fjalëkalimin e "Windows" për ta lejuar.Microsoft Edge dëshiron të eksportojë fjalëkalimet e tua. Për ta lejuar këtë, fut fjalëkalimin tënd të Windows.Microsoft Edge po përpiqet të zëvendësojë fjalëkalimet ekzistuese. Shtyp fjalëkalimin e Windows për ta lejuar këtë.Ky kompjuter tashmë ka një version më të fundit të Microsoft Edge. Nëse softueri nuk funksionon, çinstalo Microsoft Edge dhe provo përsëri.Nuk u instaluar për shkak të një gabimi të papërcaktuar. Nëse "Microsoft Edge" është aktualisht duke u ekzekutuar, mbylle dhe provo sërish.Nuk mund të instalosh versionin e njëjtë të Microsoft Edge që është aktualisht duke u ekzekutuar. Mbyll Microsoft Edge dhe provo sërish.Nuk u instalua për shkak të një gabimi të papërcaktuar. Shkarkoje sërish "Microsoft Edge".Microsoft Edge kërkon Windows 10 e lart.Ndodhi një gabim i sistemit operativ gjatë instalimit. Shkarko sërish Microsoft Edge.Veprimi tjetër në Microsoft Edge është në progres. Provo sërish më vonë.Kontrollo nëse ke hapësirë të mjaftueshme disku dhe leje për të instaluar softuerin. Nuk mundëm të krijonim një direktori të përkohshme.Instaluesi nuk arriti të çngjeshë arkivin. Shkarko përsëri Microsoft Edge.Arkivi i instaluesit është i dëmtuar ose i pavlefshëm. Shkarko përsëri Microsoft Edge.Nuk ke leje për të instaluar në nivel sistemi. Ekzekutoje instaluesin si administrator.Tashmë Microsoft Edge është instaluar për të gjithë përdoruesit në kompjuterin tënd.Mban $1 të përditësuar. Nëse ky shërbim është i çaktivizuar, aplikacioni nuk do të mbahet i përditësuar.Shfleto uebinTë pastrohen edhe të dhënat e shfletimit?Ndrysho shfletuesin e parazgjedhur në:ÇinstaloMicrosoft Edge bllokoi këtë skedar sepse ky lloj skedari është i rrezikshëmMicrosoft Edge e bllokoi këtë skedar sepse është i rrezikshëmShtesat, aplikacionet dhe temat nga burime të panjohura, mund të dëmtojnë pajisjen tënde. Microsoft Edge rekomandon instalimin e tyre vetëm nga $1Microsoft Edge e bllokoi këtë skedar, sepse ka softuer keqdashësMicrosoft Edge të rekomandon që ta skanosh këtë lidhje, pasi mund të jetë e rrezikshmeMëso se pse Microsoft Edge i bllokon disa shkarkimeDuke shtuar në Microsoft Edge…$1 mund të jetë e rrezikshme, ndaj dhe "Microsoft Edge" e ka bllokuar.$1 u bllokua si i pasigurt nga Microsoft Edge.$1 është i rrezikshëm, ndaj dhe "Microsoft Edge" e ka bllokuar.{NUM_DOWNLOAD, plural,
          =1 {Mund ta humbësh nëse e mbyll shfletuesin.} one {Mund t'i humbësh nëse e mbyll shfletuesin.} other {Mund t'i humbësh nëse e mbyll shfletuesin.}}Internet Explorer po vazhdon të shkarkohet. Nëse e mbyll, mund të humbasësh shkarkimin.Do të të duhet të shtosh një çelës të ndërfaqes API të "Microsoft" në aplikacionin, faqen apo serverin tënd.$1 është shtuar në "Microsoft Edge"Pastro gjithashtu të dhënat nga Microsoft Edge ($1)Microsoft Edge zbuloi se "$1" përmban softuer keqdashësMicrosoft Edge zbuloi se këto njësi përmbajnë softuer keqdashës:Kjo shtesë përmban softuer keqdashës dhe është jo i sigurt. Hiqe nga Microsoft Edge në mënyrë që të mos shohë dhe të ndryshojë të dhënat e tua në sajte që viziton, përfshirë informacionin tënd personal.Kjo shtesë shkel politikën e Microsoft Edge Web Store, dhe mund të jetë jo i sigurt. Hiqe nga Microsoft Edge në mënyrë që të mos shohë dhe të ndryshojë të dhënat e tua në sajte që viziton, përfshirë informacionin tënd personal.Kjo shtesë u hoq nga publikimi nga zhvilluesi i saj, dhe mund të jetë jo i sigurt. Hiqe nga Microsoft Edge në mënyrë që të mos shohë dhe të ndryshojë të dhënat e tua në sajte që viziton, përfshirë informacionin tënd personal.Microsoft Edge të rekomandon që ta rishikosh këtë shtesëLejo që shtesa të shfaqë kërkesa për qasje në shiritin e veglave të Microsoft EdgeNëse e përzgjedh këtë opsion, historia e shfletuesit mund të vazhdojë të regjistrohet. Edhe në regjimin InPrivate, Edge nuk mund të 