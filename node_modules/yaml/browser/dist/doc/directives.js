import { isNode } from '../nodes/identity.js';
import { visit } from '../visit.js';

const escapeChars = {
    '!': '%21',
    ',': '%2C',
    '[': '%5B',
    ']': '%5D',
    '{': '%7B',
    '}': '%7D'
};
const escapeTagName = (tn) => tn.replace(/[!,[\]{}]/g, ch => escapeChars[ch]);
class Directives {
    constructor(yaml, tags) {
        /**
         * The directives-end/doc-start marker `---`. If `null`, a marker may still be
         * included in the document's stringified representation.
         */
        this.docStart = null;
        /** The doc-end marker `...`.  */
        this.docEnd = false;
        this.yaml = Object.assign({}, Directives.defaultYaml, yaml);
        this.tags = Object.assign({}, Directives.defaultTags, tags);
    }
    clone() {
        const copy = new Directives(this.yaml, this.tags);
        copy.docStart = this.docStart;
        return copy;
    }
    /**
     * During parsing, get a Directives instance for the current document and
     * update the stream state according to the current version's spec.
     */
    atDocument() {
        const res = new Directives(this.yaml, this.tags);
        switch (this.yaml.version) {
            case '1.1':
                this.atNextDocument = true;
                break;
            case '1.2':
                this.atNextDocument = false;
                this.yaml = {
                    explicit: Directives.defaultYaml.explicit,
                    version: '1.2'
                };
                this.tags = Object.assign({}, Directives.defaultTags);
                break;
        }
        return res;
    }
    /**
     * @param onError - May be called even if the action was successful
     * @returns `true` on success
     */
    add(line, onError) {
        if (this.atNextDocument) {
            this.yaml = { explicit: Directives.defaultYaml.explicit, version: '1.1' };
            this.tags = Object.assign({}, Directives.defaultTags);
            this.atNextDocument = false;
        }
        const parts = line.trim().split(/[ \t]+/);
        const name = parts.shift();
        switch (name) {
            case '%TAG': {
                if (parts.length !== 2) {
                    onError(0, '%TAG directive should contain exactly two parts');
                    if (parts.length < 2)
                        return false;
                }
                const [handle, prefix] = parts;
                this.tags[handle] = prefix;
                return true;
            }
            case '%YAML': {
                this.yaml.explicit = true;
                if (parts.length !== 1) {
                    onError(0, '%YAML directive should contain exactly one part');
                    return false;
                }
                const [version] = parts;
                if (version === '1.1' || version === '1.2') {
                    this.yaml.version = version;
                    return true;
                }
                else {
                    const isValid = /^\d+\.\d+$/.test(version);
                    onError(6, `Unsupported YAML version ${version}`, isValid);
                    return false;
                }
            }
            default:
                onError(0, `Unknown directive ${name}`, true);
                return false;
        }
    }
    /**
     * Resolves a tag, matching handles to those defined in %TAG directives.
     *
     * @returns Resolved tag, which may also be the non-specific tag `'!'` or a
     *   `'!local'` tag, or `null` if unresolvable.
     */
    tagName(source, onError) {
        if (source === '!')
            return '!'; // non-specific tag
        if (source[0] !== '!') {
            onError(`Not a valid tag: ${source}`);
            return null;
        }
        if (source[1] === '<') {
            const verbatim = source.slice(2, -1);
            if (verbatim === '!' || verbatim === '!!') {
                onError(`Verbatim tags aren't resolved, so ${source} is invalid.`);
                return null;
            }
            if (source[source.length - 1] !== '>')
                 | PrivadesaQuè s'importa del Google Chrome?Què s'importa del Mozilla Firefox?Què s'importa de l'Internet Explorer?Els favorits inclouen les pestanyes que has reservat anteriorment.https://go.microsoft.com/fwlink/?linkid=2107360&clcid=0x409Hola, $1Un navegador web ràpid, segur i productiu que funciona per a tuEt donem la benvinguda a la nova experiència del Microsoft EdgeExplora les eines integrades per tenir més control sobre les teves dades i privacitat mentre navegues.Prova les Col·leccionsNo tornis a mostrar les actualitzacions del creadorAdministreu els creadors que seguiuRecopila, organitza i comparteix informació i exporta-la fàcilment al Microsoft Word o a l'Excel.Obtén recompensesGuanya recompenses mentre cerques i navegues amb el Microsoft Rewards.Completa la configuracióS'estan obtenint les credencials del Windows…S'està iniciant la sessió al Microsoft EdgecomS'està configurant el nou Microsoft Edge amb les dades i la configuració…Treballa amb més rapidesa i obtén més productivitat amb els serveis de MicrosoftLa pàgina de pestanya nova de Microsoft ofereix opcions de disposició boniques i informatives i, quan inicieu la sessió amb un compte laboral o acadèmic, us connecta ràpidament i fàcilment als documents més rellevants de l'entorn del Microsoft 365 en iniciar. Trobeu ràpidament els llocs i les persones que cerqueu, fins i tot dins de l'organització, amb la Cerca al Bing de Microsoft.Continua sense iniciar la sessióHem instal·lat les vostres extensions del nou lloc web de complements del Microsoft EdgeHem importat les vostres extensions al nou Microsoft EdgeHem instal·lat les vostres extensions al nou Microsoft EdgeNecessitem el vostre consentiment per activar aquestes extensions després de cada importació.Consulta els detalls a la pàgina de l'extensióActiva les extensions importadesActiva les extensionsHem actualitzat el Windows per oferir-te un navegador web nou, dissenyat per al Windows 10Ajuda Microsoft a millorar els productes. Per fer-ho, envia informes de bloquejos, informació sobre com utilitzes 