'use strict';

var identity = require('../nodes/identity.js');
var visit = require('../visit.js');

const escapeChars = {
    '!': '%21',
    ',': '%2C',
    '[': '%5B',
    ']': '%5D',
    '{': '%7B',
    '}': '%7D'
};
const escapeTagName = (tn) => tn.replace(/[!,[\]{}]/g, ch => escapeChars[ch]);
class Directives {
    constructor(yaml, tags) {
        /**
         * The directives-end/doc-start marker `---`. If `null`, a marker may still be
         * included in the document's stringified representation.
         */
        this.docStart = null;
        /** The doc-end marker `...`.  */
        this.docEnd = false;
        this.yaml = Object.assign({}, Directives.defaultYaml, yaml);
        this.tags = Object.assign({}, Directives.defaultTags, tags);
    }
    clone() {
        const copy = new Directives(this.yaml, this.tags);
        copy.docStart = this.docStart;
        return copy;
    }
    /**
     * During parsing, get a Directives instance for the current document and
     * update the stream state according to the current version's spec.
     */
    atDocument() {
        const res = new Directives(this.yaml, this.tags);
        switch (this.yaml.version) {
            case '1.1':
                this.atNextDocument = true;
                break;
            case '1.2':
                this.atNextDocument = false;
                this.yaml = {
                    explicit: Directives.defaultYaml.explicit,
                    version: '1.2'
                };
                this.tags = Object.assign({}, Directives.defaultTags);
                break;
        }
        return res;
    }
    /**
     * @param onError - May be called even if the action was successful
     * @returns `true` on success
     */
    add(line, onError) {
        if (this.atNextDocument) {
            this.yaml = { explicit: Directives.defaultYaml.explicit, version: '1.1' };
            this.tags = Object.assign({}, Directives.defaultTags);
            this.atNextDocument = false;
        }
        const parts = line.trim().split(/[ \t]+/);
        const name = parts.shift();
        switch (name) {
            case '%TAG': {
                if (parts.length !== 2) {
                    onError(0, '%TAG directive should contain exactly two parts');
                    if (parts.length < 2)
                        return false;
                }
                const [handle, prefix] = parts;
                this.tags[handle] = prefix;
                return true;
            }
            case '%YAML': {
                this.yaml.explicit = true;
                if (parts.length !== 1) {
                    onError(0, '%YAML directive should contain exactly one part');
                    return false;
                }
                const [version] = parts;
                if (version === '1.1' || version === '1.2') {
                    this.yaml.version = version;
                    return true;
                }
                else {
                    const isValid = /^\d+\.\d+$/.test(version);
                    onError(6, `Unsupported YAML version ${version}`, isValid);
                    return false;
                }
            }
            default:
                onError(0, `Unknown directive ${name}`, true);
                return false;
        }
    }
    /**
     * Resolves a tag, matching handles to those defined in %TAG directives.
     *
     * @returns Resolved tag, which may also be the non-specific tag `'!'` or a
     *   `'!local'` tag, or `null` if unresolvable.
     */
    tagName(source, onError) {
        if (source === '!')
            return '!'; // non-specific tag
        if (source[0] !== '!') {
            onError(`Not a valid tag: ${source}`);
            return null;
        }
        if (source[1] === '<') {
            const verbatim = source.slice(2, -1);
            if (verbatim === '!' || verbatim === '!!') {
                onError(`Verbatim tags aren't resolved, so ${source} is invalid.`);
                return null;
            }
            if (source[source.length - 1] !== '>')
 zYucatánZacatecasAcreAlagoasAmazonesAmapaBahiaCearáDistricte FederalEspírito SantoGoiásMaranhaoMinas GeraisMato Grosso do SulMato GrossoParáParaibaPernambucoPiauiParanàRio de JaneiroRio Grande do NorteRondoniaRoraimaRio Grande do SulSanta CatarinaSergipeSao PauloTocantinsAfegeix informació personalitzadaSuprimeix l'element seleccionatInformació bàsicaInformació personalitzadaAfegeix la targeta a $1$1 elements seleccionats$1 elements sense seleccionarDeseu informació com ara llicències, números de passaport, números de compte i altres dades similars de manera segura.Adreces i data de naixement que s'han desat automàticamentInclou informació com ara el nom, la data de naixement, l'adreça i molt mésTambé desa els números de telèfon, les adreces electròniques i les adreces de lliuramentMostra suggeriments per completar la informació personal desada, com ara el nom, el número de telèfon, les adreces i els correus electrònics dels formularis en escriureAfegeix la informació bàsica desada i tria una contrasenya segura (si "Suggereix contrasenyes segures" està activada). $1Afegiu informació personalitzada que voleu que ompli el Microsoft Edge, com ara números de passaport o número de compte.Ofertes per desar informació personalitzada, com ara números de passaport, llicències, números de compte i molt més.Les targetes sincronitzades estaran disponibles en tots els dispositius i productes de Microsoft. Podeu administrar aquestes targetes a la $1Aquestes targetes requereixen l'autenticació en dos passos per al pagament. Pots administrar aquestes targetes al teu $1Cap grupEmpresaTargeta de crèditTransaccióNo es pot emplenarTítol del grupGrup nou 1Títol del grup, exemple El meu passaportCamps aquest grup:$1$2 suprimit*inclou les dades que heu emplenat en línia que s'han desat automàticament al Microsoft EdgeUtilitzat per última vegadaSSFSDPregunta'm si vull desar la informació personalitzadaPermet identificar informació nova quan s'omplen els formularis i desar-los per utilitzar l’emplenament automàtic més tard.Targetes que has desat en aquest dispositiuEmplena la in